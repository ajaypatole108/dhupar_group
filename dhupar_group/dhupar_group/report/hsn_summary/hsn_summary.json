{
 "add_total_row": 0,
 "columns": [],
 "creation": "2020-06-13 19:11:32.571372",
 "disable_prepared_report": 1,
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "filters": [],
 "idx": 0,
 "is_standard": "Yes",
 "javascript": "// Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and Contributors\n// License: GNU General Public License v3. See license.txt\n\nfrappe.query_reports[\"Dhupar GSTR-1\"] = {\n\t\"filters\": [\n\t\t{\n\t\t\t\"fieldname\":\"company\",\n\t\t\t\"label\": __(\"Company\"),\n\t\t\t\"fieldtype\": \"Link\",\n\t\t\t\"options\": \"Company\",\n\t\t\t\"reqd\": 1,\n\t\t\t\"default\": frappe.defaults.get_user_default(\"Company\")\n\t\t},\n\t\t{\n\t\t\t\"fieldname\":\"from_date\",\n\t\t\t\"label\": __(\"From Date\"),\n\t\t\t\"fieldtype\": \"Date\",\n\t\t\t\"reqd\": 1,\n\t\t\t\"default\": frappe.datetime.add_months(frappe.datetime.get_today(), -3),\n\t\t\t\"width\": \"80\"\n\t\t},\n\t\t{\n\t\t\t\"fieldname\":\"to_date\",\n\t\t\t\"label\": __(\"To Date\"),\n\t\t\t\"fieldtype\": \"Date\",\n\t\t\t\"reqd\": 1,\n\t\t\t\"default\": frappe.datetime.get_today()\n\t\t},\n\t\t{\n\t\t\t\"fieldname\":\"type_of_business\",\n\t\t\t\"label\": __(\"Type of Business\"),\n\t\t\t\"fieldtype\": \"Select\",\n\t\t\t\"reqd\": 1,\n\t\t\t\"options\": [\"HSN summary\"],\n\t\t\t\"default\": \"B2B\"\n\t\t}\n\t]\n}\n",
 "letter_head": "Default",
 "modified": "2023-10-31 11:26:40.936370",
 "modified_by": "Administrator",
 "module": "Dhupar Group",
 "name": "HSN SUMMARY",
 "owner": "Administrator",
 "prepared_report": 0,
 "query": "",
 "ref_doctype": "GL Entry",
 "report_name": "HSN SUMMARY",
 "report_script": "#from __future__ import unicode_literals\r\n#import frappe, json, copy\r\n#from frappe import _\r\n#from frappe.utils import flt, formatdate\r\n#from datetime import date\r\n#from six import iteritems\r\n\r\ndef execute(filters=None):\r\n\treturn Gstr1Report(filters).run()\r\n\r\nclass Gstr1Report(object):\r\n\tdef __init__(self, filters=None):\r\n\t\tself.filters = frappe.dict(filters or {})\r\n\t\tself.columns = []\r\n\t\tself.data = []\r\n\t\tself.doctype = \"Sales Invoice\"\r\n\t\tself.tax_doctype = \"Sales Taxes and Charges\"\r\n\t\tself.select_columns = \"\"\"\r\n\t\t\tname as invoice_number,\r\n\t\t\tcustomer_name,\r\n\t\t\tposting_date,\r\n\t\t\tbase_grand_total,\r\n\t\t\tbase_rounded_total,\r\n\t\t\tCOALESCE(NULLIF(customer_gstin,''), NULLIF(billing_address_gstin, '')) as customer_gstin,\r\n\t\t\tplace_of_supply,\r\n\t\t\tecommerce_gstin,\r\n\t\t\treverse_charge,\r\n\t\t\tinvoice_type,\r\n\t\t\treturn_against,\r\n\t\t\tis_return,\r\n\t\t\tinvoice_type,\r\n\t\t\texport_type,\r\n\t\t\tport_code,\r\n\t\t\tshipping_bill_number,\r\n\t\t\tshipping_bill_date,\r\n\t\t\treason_for_issuing_document\r\n\t\t\"\"\"\r\n\t\tself.customer_type = \"Company\" if self.filters.get(\"type_of_business\") ==  \"B2B\" else \"Individual\"\r\n\r\n\tdef run(self):\r\n        \r\n\t\tif self.filters.get(\"type_of_business\") ==  \"B2B\":\r\n\t\t\tself.get_columns()\r\n\t\t\tcustomers = frappe.get_all(\"Customer\", filters={\"customer_type\": self.customer_type})\r\n\t\t\treport_out = frappe.db.sql('''\r\n\t\t\tSELECT customer_address, customer_name, name, posting_date, base_grand_total, place_of_supply, reverse_charge, invoice_type, ecommerce_gstin, net_total\r\n\t\t\tFROM `tabSales Invoice`\r\n\t\t\twhere customer in ('{0}') and posting_date >= \"{1}\" and posting_date <= \"{2}\" and docstatus = 1 and is_return = 0 \r\n\t\t\torder by posting_date'''.format(\"', '\".join([frappe.db.escape(c.name) for c in customers]), self.filters.get('from_date'), self.filters.get('to_date')))\r\n\t\t\trow = []\r\n\t\t\tfor i in report_out:\r\n\t\t\t\tfor itter in i:\r\n\t\t\t\t\trow.append(itter)\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\treport_gstin = frappe.db.sql('''\r\n\t\t\t\tSELECT gstin\r\n\t\t\t\tFrom `tabAddress`\r\n\t\t\t\twhere name = \"{0}\"\r\n\t\t\t\t'''.format(i[0]))\r\n\t\t\t\tfor jk in report_gstin:\r\n\t\t\t\t\tfor kj in jk:\r\n\t\t\t\t\t\trow[0] = kj\r\n\r\n\t\t\t\titems = list(frappe.db.sql('''\r\n\t\t\t\tSELECT account_head, item_wise_tax_detail\r\n\t\t\t\tFROM `tabSales Taxes and Charges`\r\n\t\t\t\twhere parent = \"{0}\"\r\n\t\t\t\t'''.format(row[2])))\r\n\t\t\t\trates = []\r\n\t\t\t\tfor i in items:\r\n\t\t\t\t\ti = list(i)\r\n\t\t\t\t\tif i[0] == \"SGST - DBTPL\" or i[0] == 'CGST - DBTPL':\r\n\t\t\t\t\t\tjson_rates = json.loads(i[1])\r\n\t\t\t\t\t\tfor j in json_rates:\r\n\t\t\t\t\t\t\tvalue = {'rate': json_rates[j][0] * 2, 'value': round(json_rates[j][1], 4) * (100 / (json_rates[j][0] * 2)) if not json_rates[j][0] == 0  else 0 }\r\n\t\t\t\t\t\t\tadded = False\r\n\t\t\t\t\t\t\tfor k in rates:\r\n\t\t\t\t\t\t\t\tif value['rate'] == k['rate']:\r\n\t\t\t\t\t\t\t\t\tk['value'] = k['value'] + value['value']\r\n\t\t\t\t\t\t\t\t\tadded = True\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tif not added:\r\n\t\t\t\t\t\t\t\trates.append(value)\r\n\t\t\t\t\telif i[0] == \"IGST - DBTPL\":\r\n\t\t\t\t\t\tjson_rates = json.loads(i[1])\r\n\t\t\t\t\t\tfor j in json_rates:\r\n\t\t\t\t\t\t\tvalue = {'rate': json_rates[j][0], 'value': round(json_rates[j][1], 4) * (100 / (json_rates[j][0]))}\r\n\t\t\t\t\t\t\tadded = False\r\n\t\t\t\t\t\t\tfor k in rates:\r\n\t\t\t\t\t\t\t\tif value['rate'] == k['rate']:\r\n\t\t\t\t\t\t\t\t\tk['value'] = k['value'] + value['value']\r\n\t\t\t\t\t\t\t\t\tadded = True\r\n\t\t\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t\tif not added:\r\n\t\t\t\t\t\t\t\trates.append(value)\r\n\t\t\t\t\r\n\t\t\t\tfor i in rates:\r\n\t\t\t\t\tdupl_row = copy.copy(row)\r\n\t\t\t\t\tdupl_row.insert(9, i['rate'])\r\n\t\t\t\t\tdupl_row[10] = i['value']\r\n\t\t\t\t\tself.data.append(dupl_row)\r\n\r\n\t\t\t\trow = []\r\n\t\t\t\ttotal_net = 0\r\n\t\t\t\ttotal_after = 0\r\n\t\t\tfor i in self.data:\r\n\t\t\t\ttotal_after += i[4]\r\n\t\t\t\ttotal_net += i[10]\r\n\t\t\tself.data.append([\"\",\"\",\"\",\"Total\",total_after,\"\",\"\",\"\",\"\",\"\",total_net])\r\n\r\n\t\telif self.filters.get(\"type_of_business\") == \"HSN summary\":\r\n\t\t\tself.get_columns()\r\n\t\t\thsn_list = list(frappe.db.sql('''\r\n\t\t\tselect `tabSales Invoice Item`.gst_hsn_code, sum(`tabSales Invoice Item`.qty), sum(`tabSales Invoice Item`.net_amount),\r\n\t\t\t`tabSales Invoice Item`.item_tax_rate, `tabSales Taxes and Charges`.account_head, `tabSales Taxes and Charges`.rate\r\n\t\t\tFROM `tabSales Invoice Item`, `tabSales Taxes and Charges`\r\n\t\t\twhere `tabSales Invoice Item`.docstatus = 1 and `tabSales Taxes and Charges`.parent = `tabSales Invoice Item`.parent\r\n\t\t\tAND (SELECT posting_date from `tabSales Invoice` where name = `tabSales Invoice Item`.parent) BETWEEN \"{0}\" and \"{1}\"\r\n\t\t\tGROUP by gst_hsn_code, account_head, item_tax_rate\r\n\t\t\tORDER by gst_hsn_code, item_tax_rate\r\n\t\t\t'''.format(self.filters.get('from_date'), self.filters.get('to_date'))))\r\n\t\t\trow = []\r\n\t\t\tprev_item = {\r\n\t\t\t\t'HSN': \t\t\t\"\",\r\n\t\t\t\t'description': \t\"\",\r\n\t\t\t\t'UOM': \t\t\t\"NOS-NUMBERS\",\r\n\t\t\t\t'quantity': \t0,\r\n\t\t\t\t'after_tax': \t0,\r\n\t\t\t\t'before_tax': \t0,\r\n\t\t\t\t'SGST':        \t0,\r\n\t\t\t\t'CGST':        \t0,\r\n\t\t\t\t'IGST': \t\t0,\r\n\t\t\t\t'cess': \t\t0,\r\n\t\t\t}\r\n\t\t\tfor i in hsn_list:\r\n\t\t\t\ti = list(i)\r\n\t\t\t\ttaxes = json.loads(i[3])\r\n\t\t\t\ti[2] = round(i[2], 2)\r\n\t\t\t\tif 'SGST - DBTPL' in taxes:\r\n\t\t\t\t\titem = {\r\n\t\t\t\t\t'HSN': \t\t\ti[0],\r\n\t\t\t\t\t'description': \t\"\",\r\n\t\t\t\t\t'UOM': \t\t\t\"NOS-NUMBERS\",\r\n\t\t\t\t\t'quantity': \ti[1],\r\n\t\t\t\t\t'after_tax': \t0,\r\n\t\t\t\t\t'before_tax': \ti[2],\r\n\t\t\t\t\t'SGST':        \tround(i[2] * taxes['SGST - DBTPL'] / 100,4) if 'SGST' in i[4]  else 0,\r\n\t\t\t\t\t'CGST':        \tround(i[2] * taxes['CGST - DBTPL'] / 100,4) if 'CGST' in i[4]  else 0,\r\n\t\t\t\t\t'IGST': \t\tround(i[2] * taxes['IGST - DBTPL'] / 100,4) if 'IGST' in i[4]  else 0,\r\n\t\t\t\t\t'cess': \t\t0,\r\n\t\t\t\t\t}\r\n\t\t\t\telse:\r\n\t\t\t\t\titem = {\r\n\t\t\t\t\t'HSN': \t\t\ti[0],\r\n\t\t\t\t\t'description': \t\"\",\r\n\t\t\t\t\t'UOM': \t\t\t\"NOS-NUMBERS\",\r\n\t\t\t\t\t'quantity': \ti[1],\r\n\t\t\t\t\t'after_tax': \t0,\r\n\t\t\t\t\t'before_tax': \ti[2],\r\n\t\t\t\t\t'SGST':        \t0,\r\n\t\t\t\t\t'CGST':        \t0,\r\n\t\t\t\t\t'IGST': \t\t0,\r\n\t\t\t\t\t'cess': \t\t0,\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tadded = False\r\n\t\t\t\tfor j in row:\r\n\t\t\t\t\tif j['HSN'] == item['HSN']:\r\n\r\n\t\t\t\t\t\tif not (prev_item['quantity'] == item['quantity'] and prev_item['before_tax'] == item['before_tax'] and prev_item['HSN'] == item['HSN']):\r\n\t\t\t\t\t\t\tj['quantity'] = j['quantity'] + item['quantity']\r\n\t\t\t\t\t\t\tj['after_tax'] = j['after_tax'] + item['after_tax']\r\n\t\t\t\t\t\t\tj['before_tax'] = j['before_tax'] + item['before_tax']\r\n\t\t\t\t\t\tj['SGST'] = j['SGST'] + item['SGST']\r\n\t\t\t\t\t\tj['CGST'] = j['CGST'] + item['CGST']\r\n\t\t\t\t\t\tj['IGST'] = j['IGST'] + item['IGST']\r\n\t\t\t\t\t\tadded = True\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\tprev_item = copy.copy(item)\r\n\t\t\t\tif not added:\r\n\t\t\t\t\trow.append(item)\r\n\t\t\t#print len(row)\r\n\t\t\tquantity =0\r\n\t\t\tafter_tax =0\r\n\t\t\tbefore_tax =0\r\n\t\t\tsgst =0\r\n\t\t\tcgst =0\r\n\t\t\tigst =0 \r\n\t\t\t\r\n\t\t\tfor i in row:\r\n\t\t\t\tself.data.append([i['HSN'], i['description'], i['UOM'], i['quantity'], i['before_tax'] + i['SGST'] + i['CGST'] + i['IGST'], i['before_tax'], i['SGST'], i['CGST'], i['IGST']])\r\n\t\t\tfor i in self.data:\r\n\t\t\t\tquantity += i[3]\r\n\t\t\t\tafter_tax += i[4]\r\n\t\t\t\tbefore_tax += i[5]\r\n\t\t\t\tsgst += i[6]\r\n\t\t\t\tcgst += i[7]\r\n\t\t\t\tigst += i[8] \r\n\t\t\tself.data.append([\"\",\"\",\"Totals\",quantity,after_tax,before_tax,sgst,cgst,igst])\r\n\r\n\t\telse:\r\n\t\t\tself.get_columns()\r\n\t\t\tself.get_gst_accounts()\r\n\t\t\tself.get_invoice_data()\r\n\r\n\t\t\tif self.invoices:\r\n\t\t\t\tself.get_invoice_items()\r\n\t\t\t\tself.get_items_based_on_tax_rate()\r\n\t\t\t\tself.invoice_fields = [d[\"fieldname\"] for d in self.invoice_columns]\r\n\t\t\t\tself.get_data()\r\n\r\n\t\treturn self.columns, self.data\r\n\r\n\tdef get_data(self):\r\n\t\tfor inv, items_based_on_rate in self.items_based_on_tax_rate.items():\r\n\t\t\tinvoice_details = self.invoices.get(inv)\r\n\t\t\tfor rate, items in items_based_on_rate.items():\r\n\t\t\t\trow, taxable_value = self.get_row_data_for_invoice(inv, invoice_details, rate, items)\r\n\t\t\t\tif self.filters.get(\"type_of_business\") ==  \"B2C Small\":\r\n\t\t\t\t\trow.append(\"E\" if invoice_details.ecommerce_gstin else \"OE\")\r\n\r\n\t\t\t\tif self.filters.get(\"type_of_business\") ==  \"CDNR\":\r\n\t\t\t\t\trow.append(\"Y\" if invoice_details.posting_date <= date(2017, 7, 1) else \"N\")\r\n\t\t\t\t\trow.append(\"C\" if invoice_details.return_against else \"R\")\r\n\r\n\t\t\t\tself.data.append(row)\r\n\r\n\tdef get_row_data_for_invoice(self, invoice, invoice_details, tax_rate, items):\r\n\t\trow = []\r\n\t\tfor fieldname in self.invoice_fields:\r\n\t\t\tif self.filters.get(\"type_of_business\") ==  \"CDNR\" and fieldname == \"invoice_value\":\r\n\t\t\t\trow.append(abs(invoice_details.base_rounded_total) or abs(invoice_details.base_grand_total))\r\n\t\t\telif fieldname == \"invoice_value\":\r\n\t\t\t\trow.append(invoice_details.base_rounded_total or invoice_details.base_grand_total)\r\n\t\t\telif fieldname in ('posting_date', 'shipping_bill_date'):\r\n\t\t\t\trow.append(formatdate(invoice_details.get(fieldname), 'dd-MMM-YY'))\r\n\t\t\telif fieldname == \"export_type\":\r\n\t\t\t\texport_type = \"WPAY\" if invoice_details.get(fieldname)==\"With Payment of Tax\" else \"WOPAY\"\r\n\t\t\t\trow.append(export_type)\r\n\t\t\telse:\r\n\t\t\t\trow.append(invoice_details.get(fieldname))\r\n\r\n\t\ttaxable_value = sum([abs(net_amount)\r\n\t\t\tfor item_code, net_amount in self.invoice_items.get(invoice).items() if item_code in items])\r\n\t\trow += [tax_rate or 0, taxable_value]\r\n\r\n\t\treturn row, taxable_value\r\n\r\n\tdef get_invoice_data(self):\r\n\t\tself.invoices = frappe.dict()\r\n\t\tconditions = self.get_conditions()\r\n\t\tinvoice_data = frappe.db.sql(\"\"\"\r\n\t\t\tselect\r\n\t\t\t\t{select_columns}\r\n\t\t\tfrom `tab{doctype}`\r\n\t\t\twhere docstatus = 1 {where_conditions}\r\n\t\t\torder by posting_date desc\r\n\t\t\t\"\"\".format(select_columns=self.select_columns, doctype=self.doctype,\r\n\t\t\t\twhere_conditions=conditions), self.filters, as_dict=1)\r\n\r\n\t\tfor d in invoice_data:\r\n\t\t\tself.invoices.setdefault(d.invoice_number, d)\r\n\r\n\tdef get_conditions(self):\r\n\t\tconditions = \"\"\r\n\r\n\t\tfor opts in ((\"company\", \" and company=%(company)s\"),\r\n\t\t\t(\"from_date\", \" and posting_date>=%(from_date)s\"),\r\n\t\t\t(\"to_date\", \" and posting_date<=%(to_date)s\"),\r\n\t\t\t(\"company_address\", \" and company_address=%(company_address)s\")):\r\n\t\t\t\tif self.filters.get(opts[0]):\r\n\t\t\t\t\tconditions += opts[1]\r\n\r\n\t\tcustomers = frappe.get_all(\"Customer\", filters={\"customer_type\": self.customer_type})\r\n\r\n\t\tif self.filters.get(\"type_of_business\") ==  \"B2B\":\r\n\t\t\tconditions += \"\"\" and ifnull(invoice_type, '') != 'Export' and is_return != 1\r\n\t\t\t\tand customer in ('{0}')\"\"\".format(\"', '\".join([frappe.db.escape(c.name) for c in customers]))\r\n\r\n\t\tif self.filters.get(\"type_of_business\") in (\"B2C Large\", \"B2C Small\"):\r\n\t\t\tb2c_limit = frappe.db.get_single_value('GST Settings', 'b2c_limit')\r\n\t\t\tfrappe.msgprint(\"here\")\r\n\t\t\tif not b2c_limit:\r\n\t\t\t\tfrappe.throw(_(\"Please set B2C Limit in GST Settings.\"))\r\n\r\n\t\tif self.filters.get(\"type_of_business\") ==  \"B2C Large\":\r\n\t\t\tconditions += \"\"\" and SUBSTR(place_of_supply, 1, 2) != SUBSTR(company_gstin, 1, 2)\r\n\t\t\t\tand grand_total > {0} and is_return != 1 and customer in ('{1}')\"\"\".\\\r\n\t\t\t\t\tformat(flt(b2c_limit), \"', '\".join([frappe.db.escape(c.name) for c in customers]))\r\n\t\telif self.filters.get(\"type_of_business\") ==  \"B2C Small\":\r\n\t\t\tconditions += \"\"\" and (\r\n\t\t\t\tSUBSTR(place_of_supply, 1, 2) = SUBSTR(company_gstin, 1, 2)\r\n\t\t\t\t\tor grand_total <= {0}) and is_return != 1 and customer in ('{1}')\"\"\".\\\r\n\t\t\t\t\t\tformat(flt(b2c_limit), \"', '\".join([frappe.db.escape(c.name) for c in customers]))\r\n\r\n\t\telif self.filters.get(\"type_of_business\") ==  \"CDNR\":\r\n\t\t\tconditions += \"\"\" and is_return = 1 \"\"\"\r\n\r\n\t\telif self.filters.get(\"type_of_business\") ==  \"EXPORT\":\r\n\t\t\tconditions += \"\"\" and is_return !=1 and invoice_type = 'Export' \"\"\"\r\n\t\treturn conditions\r\n\r\n\tdef get_invoice_items(self):\r\n\t\tself.invoice_items = frappe.dict()\r\n\t\titems = frappe.db.sql(\"\"\"\r\n\t\t\tselect item_code, parent, base_net_amount\r\n\t\t\tfrom `tab%s Item`\r\n\t\t\twhere parent in (%s)\r\n\t\t\"\"\" % (self.doctype, ', '.join(['%s']*len(self.invoices))), tuple(self.invoices), as_dict=1)\r\n\r\n\t\tfor d in items:\r\n\t\t\tif d.item_code not in self.invoice_items.get(d.parent, {}):\r\n\t\t\t\tself.invoice_items.setdefault(d.parent, {}).setdefault(d.item_code,\r\n\t\t\t\t\tsum(i.get('base_net_amount', 0) for i in items\r\n\t\t\t\t\t    if i.item_code == d.item_code and i.parent == d.parent))\r\n\r\n\tdef get_items_based_on_tax_rate(self):\r\n\t\tself.tax_details = frappe.db.sql(\"\"\"\r\n\t\t\tselect\r\n\t\t\t\tparent, account_head, item_wise_tax_detail, base_tax_amount_after_discount_amount\r\n\t\t\tfrom `tab%s`\r\n\t\t\twhere\r\n\t\t\t\tparenttype = %s and docstatus = 1\r\n\t\t\t\tand parent in (%s)\r\n\t\t\torder by account_head\r\n\t\t\"\"\" % (self.tax_doctype, '%s', ', '.join(['%s']*len(self.invoices.keys()))),\r\n\t\t\ttuple([self.doctype] + list(self.invoices.keys())))\r\n\r\n\t\tself.items_based_on_tax_rate = {}\r\n\t\tself.invoice_cess = frappe.dict()\r\n\t\tunidentified_gst_accounts = []\r\n\t\tfor parent, account, item_wise_tax_detail, tax_amount in self.tax_details:\r\n\t\t\tif account in self.gst_accounts.cess_account:\r\n\t\t\t\tself.invoice_cess.setdefault(parent, tax_amount)\r\n\t\t\telse:\r\n\t\t\t\tif item_wise_tax_detail:\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\titem_wise_tax_detail = json.loads(item_wise_tax_detail)\r\n\t\t\t\t\t\tcgst_or_sgst = False\r\n\t\t\t\t\t\tif account in self.gst_accounts.cgst_account \\\r\n\t\t\t\t\t\t\tor account in self.gst_accounts.sgst_account:\r\n\t\t\t\t\t\t\tcgst_or_sgst = True\r\n\r\n\t\t\t\t\t\tif not (cgst_or_sgst or account in self.gst_accounts.igst_account):\r\n\t\t\t\t\t\t\tif \"gst\" in account.lower() and account not in unidentified_gst_accounts:\r\n\t\t\t\t\t\t\t\tunidentified_gst_accounts.append(account)\r\n\t\t\t\t\t\t\tcontinue\r\n\r\n\t\t\t\t\t\tfor item_code, tax_amounts in item_wise_tax_detail.items():\r\n\t\t\t\t\t\t\ttax_rate = tax_amounts[0]\r\n\t\t\t\t\t\t\tif cgst_or_sgst:\r\n\t\t\t\t\t\t\t\ttax_rate *= 2\r\n\r\n\t\t\t\t\t\t\trate_based_dict = self.items_based_on_tax_rate\\\r\n\t\t\t\t\t\t\t\t.setdefault(parent, {}).setdefault(tax_rate, [])\r\n\t\t\t\t\t\t\tif item_code not in rate_based_dict:\r\n\t\t\t\t\t\t\t\trate_based_dict.append(item_code)\r\n\t\t\t\t\texcept ValueError:\r\n\t\t\t\t\t\tcontinue\r\n\t\tif unidentified_gst_accounts:\r\n\t\t\tfrappe.msgprint(_(\"Following accounts might be selected in GST Settings:\")\r\n\t\t\t\t+ \"<br>\" + \"<br>\".join(unidentified_gst_accounts), alert=True)\r\n\r\n\t\t# Build itemised tax for export invoices where tax table is blank\r\n\t\tfor invoice, items in iteritems(self.invoice_items):\r\n\t\t\tif invoice not in self.items_based_on_tax_rate \\\r\n\t\t\t\tand frappe.db.get_value(self.doctype, invoice, \"export_type\") == \"Without Payment of Tax\":\r\n\t\t\t\t\tself.items_based_on_tax_rate.setdefault(invoice, {}).setdefault(0, items.keys())\r\n\r\n\tdef get_gst_accounts(self):\r\n\t\tself.gst_accounts = frappe.dict()\r\n\t\tgst_settings_accounts = frappe.get_all(\"GST Account\",\r\n\t\t\tfilters={\"parent\": \"GST Settings\", \"company\": self.filters.company},\r\n\t\t\tfields=[\"cgst_account\", \"sgst_account\", \"igst_account\", \"cess_account\"])\r\n\r\n\t\tif not gst_settings_accounts:\r\n\t\t\tfrappe.throw(_(\"Please set GST Accounts in GST Settings\"))\r\n\r\n\t\tfor d in gst_settings_accounts:\r\n\t\t\tfor acc, val in d.items():\r\n\t\t\t\tself.gst_accounts.setdefault(acc, []).append(val)\r\n\r\n\tdef get_columns(self):\r\n\t\tself.tax_columns = [\r\n\t\t\t{\r\n\t\t\t\t\"fieldname\": \"rate\",\r\n\t\t\t\t\"label\": \"Rate\",\r\n\t\t\t\t\"fieldtype\": \"Int\",\r\n\t\t\t\t\"width\": 60\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"fieldname\": \"taxable_value\",\r\n\t\t\t\t\"label\": \"Taxable Value\",\r\n\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\"width\": 100\r\n\t\t\t}\r\n\t\t]\r\n\t\tself.other_columns = []\r\n\r\n\t\tif self.filters.get(\"type_of_business\") ==  \"B2B\":\r\n\t\t\tself.invoice_columns = [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"customer_gstin\",\r\n\t\t\t\t\t\"label\": \"GSTIN/UIN of Recipient\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 150\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"customer_name\",\r\n\t\t\t\t\t\"label\": \"Receiver Name\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\":100\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"invoice_number\",\r\n\t\t\t\t\t\"label\": \"Invoice Number\",\r\n\t\t\t\t\t\"fieldtype\": \"Link\",\r\n\t\t\t\t\t\"options\": \"Sales Invoice\",\r\n\t\t\t\t\t\"width\":100\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"posting_date\",\r\n\t\t\t\t\t\"label\": \"Invoice date\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\":80\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"invoice_value\",\r\n\t\t\t\t\t\"label\": \"Invoice Value\",\r\n\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\"width\":100\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"place_of_supply\",\r\n\t\t\t\t\t\"label\": \"Place Of Supply\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\":100\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"reverse_charge\",\r\n\t\t\t\t\t\"label\": \"Reverse Charge\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"invoice_type\",\r\n\t\t\t\t\t\"label\": \"Invoice Type\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"ecommerce_gstin\",\r\n\t\t\t\t\t\"label\": \"E-Commerce GSTIN\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\":120\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t\tself.other_columns = [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"fieldname\": \"cess_amount\",\r\n\t\t\t\t\t\t\"label\": \"Cess Amount\",\r\n\t\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\t\"width\": 100\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\r\n\t\telif self.filters.get(\"type_of_business\") ==  \"B2C Large\":\r\n\t\t\tself.invoice_columns = [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"invoice_number\",\r\n\t\t\t\t\t\"label\": \"Invoice Number\",\r\n\t\t\t\t\t\"fieldtype\": \"Link\",\r\n\t\t\t\t\t\"options\": \"Sales Invoice\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"posting_date\",\r\n\t\t\t\t\t\"label\": \"Invoice date\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 100\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"invoice_value\",\r\n\t\t\t\t\t\"label\": \"Invoice Value\",\r\n\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\"width\": 100\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"place_of_supply\",\r\n\t\t\t\t\t\"label\": \"Place Of Supply\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"ecommerce_gstin\",\r\n\t\t\t\t\t\"label\": \"E-Commerce GSTIN\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 130\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t\tself.other_columns = [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"fieldname\": \"cess_amount\",\r\n\t\t\t\t\t\t\"label\": \"Cess Amount\",\r\n\t\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\t\"width\": 100\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\telif self.filters.get(\"type_of_business\") ==  \"CDNR\":\r\n\t\t\tself.invoice_columns = [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"customer_gstin\",\r\n\t\t\t\t\t\"label\": \"GSTIN/UIN of Recipient\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 150\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"customer_name\",\r\n\t\t\t\t\t\"label\": \"Receiver Name\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"return_against\",\r\n\t\t\t\t\t\"label\": \"Invoice/Advance Receipt Number\",\r\n\t\t\t\t\t\"fieldtype\": \"Link\",\r\n\t\t\t\t\t\"options\": \"Sales Invoice\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"posting_date\",\r\n\t\t\t\t\t\"label\": \"Invoice/Advance Receipt date\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"invoice_number\",\r\n\t\t\t\t\t\"label\": \"Invoice/Advance Receipt Number\",\r\n\t\t\t\t\t\"fieldtype\": \"Link\",\r\n\t\t\t\t\t\"options\": \"Sales Invoice\",\r\n\t\t\t\t\t\"width\":120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"reason_for_issuing_document\",\r\n\t\t\t\t\t\"label\": \"Reason For Issuing document\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 140\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"place_of_supply\",\r\n\t\t\t\t\t\"label\": \"Place Of Supply\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"invoice_value\",\r\n\t\t\t\t\t\"label\": \"Invoice Value\",\r\n\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t\tself.other_columns = [\r\n\t\t\t\t{\r\n\t\t\t\t\t\t\"fieldname\": \"cess_amount\",\r\n\t\t\t\t\t\t\"label\": \"Cess Amount\",\r\n\t\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\t\"width\": 100\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"pre_gst\",\r\n\t\t\t\t\t\"label\": \"PRE GST\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 80\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"document_type\",\r\n\t\t\t\t\t\"label\": \"Document Type\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 80\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\telif self.filters.get(\"type_of_business\") ==  \"B2C Small\":\r\n\t\t\tself.invoice_columns = [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"invoice_number\",\r\n\t\t\t\t\t\"label\": \"Invoice\",\r\n\t\t\t\t\t\"fieldtype\": \"Link\",\r\n\t\t\t\t\t\"options\": \"Sales Invoice\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"place_of_supply\",\r\n\t\t\t\t\t\"label\": \"Place Of Supply\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"ecommerce_gstin\",\r\n\t\t\t\t\t\"label\": \"E-Commerce GSTIN\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 130\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t\tself.other_columns = [\r\n\t\t\t\t{\r\n\t\t\t\t\t\t\"fieldname\": \"cess_amount\",\r\n\t\t\t\t\t\t\"label\": \"Cess Amount\",\r\n\t\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\t\"width\": 100\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"type\",\r\n\t\t\t\t\t\"label\": \"Type\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 50\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\telif self.filters.get(\"type_of_business\") ==  \"EXPORT\":\r\n\t\t\tself.invoice_columns = [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"export_type\",\r\n\t\t\t\t\t\"label\": \"Export Type\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\":120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"invoice_number\",\r\n\t\t\t\t\t\"label\": \"Invoice Number\",\r\n\t\t\t\t\t\"fieldtype\": \"Link\",\r\n\t\t\t\t\t\"options\": \"Sales Invoice\",\r\n\t\t\t\t\t\"width\":120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"posting_date\",\r\n\t\t\t\t\t\"label\": \"Invoice date\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"invoice_value\",\r\n\t\t\t\t\t\"label\": \"Invoice Value\",\r\n\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"port_code\",\r\n\t\t\t\t\t\"label\": \"Port Code\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"shipping_bill_number\",\r\n\t\t\t\t\t\"label\": \"Shipping Bill Number\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"shipping_bill_date\",\r\n\t\t\t\t\t\"label\": \"Shipping Bill Date\",\r\n                    \"fieldtype\": \"Date\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\telif self.filters.get(\"type_of_business\") ==  \"HSN summary\":\r\n\t\t\tself.tax_columns = []\r\n\t\t\tself.invoice_columns = [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"hsn_code\",\r\n\t\t\t\t\t\"label\": \"HSN Code\",\r\n\t\t\t\t\t\"fieldtype\": \"Int\",\r\n\t\t\t\t\t\"width\":120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"description\",\r\n\t\t\t\t\t\"label\": \"Description\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"options\": \"Sales Invoice\",\r\n\t\t\t\t\t\"width\":120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"uqc\",\r\n\t\t\t\t\t\"label\": \"UQC\",\r\n\t\t\t\t\t\"fieldtype\": \"Data\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"total_quantity\",\r\n\t\t\t\t\t\"label\": \"Total Quantity\",\r\n\t\t\t\t\t\"fieldtype\": \"Int\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"total_amount\",\r\n\t\t\t\t\t\"label\": \"Total Amount\",\r\n\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"total_taxable_value\",\r\n\t\t\t\t\t\"label\": \"Total Taxable Value\",\r\n\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"state_tax_amount\",\r\n\t\t\t\t\t\"label\": \"State Tax Amount\",\r\n\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"central_tax_amount\",\r\n\t\t\t\t\t\"label\": \"Central Tax Amount\",\r\n\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"integrated_tax_amount\",\r\n\t\t\t\t\t\"label\": \"Integrated Tax Amount\",\r\n\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"fieldname\": \"cess_amount\",\r\n\t\t\t\t\t\"label\": \"Cess Amount\",\r\n\t\t\t\t\t\"fieldtype\": \"Currency\",\r\n\t\t\t\t\t\"width\": 120\r\n\t\t\t\t}\r\n\t\t\t]\r\n            \r\n\t\tself.columns = self.invoice_columns + self.tax_columns + self.other_columns\r\n",
 "report_type": "Script Report",
 "roles": [
  {
   "role": "Accounts User"
  },
  {
   "role": "Accounts Manager"
  },
  {
   "role": "Auditor"
  },
  {
   "role": "System Manager"
  }
 ]
}